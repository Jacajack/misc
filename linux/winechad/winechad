#!/usr/bin/python3
import argparse
import sys
import os
import re
import toml
import subprocess
from pathlib import Path, PureWindowsPath, PurePosixPath
import logging
import rich
from rich import print
from rich.tree import Tree
from rich.logging import RichHandler
from typing import Optional, List

log = logging.getLogger("rich")

class WineApp:
	def __init__(self, name: str, exe_path: PureWindowsPath, icon_path: str = "", description: str = "", prefix = None, env = dict(), args: List[str] = []):
		self.name = name.strip()
		self.exe_path = Path(exe_path)
		self.icon_path = Path(icon_path)
		self.env = env
		self.args = args
		self.description = description
		self.prefix = prefix
	
	def set_prefix(self, pfx):
		self.prefix = pfx
	
	def validate(self):
		assert re.match(r'[\w-]+$', self.name), "Name must contain only 'word' characters"
		assert self.name != "", "Application name must not be empty"
		if not self.exe_path.is_absolute() and len(self.exe_path.parts) != 1:
			assert os.path.exists(self.prefix.drive_path(self.prefix.default_drive) / self.exe_path), "EXE does not exist"
	
	def is_valid(self):
		try:
			self.validate()
		except:
			return False
		else:
			return True
			
	def invalid_reason(self):
		try:
			self.validate()
		except Exception as e:
			return str(e)
		else:
			return None
	
	def run(self):
		self.prefix.run_wine(self.exe_path, args = self.args, env_vars = self.env)
			

class WinePrefix:
	def __init__(self, name: str, prefix_path: Path, wine_path: Optional[Path], global_wine_dir: Path, description = "", applications = [], is_64_bit = False, default_drive = "c", default_app: Optional[str] = None):
		self.name = name.strip()
		self.prefix_path = prefix_path
		self.wine_path = None if wine_path is None else Path(wine_path)
		self.global_wine_dir = global_wine_dir
		self.applications = applications
		self.description = description
		self.is_64_bit = is_64_bit
		self.default_drive = default_drive # TODO drop this
		self.default_app = default_app
		
		for a in self.applications:
			a.set_prefix(self)
	
	@staticmethod
	def from_dir(prefix_dir: Path, global_wine_dir: Path):
		config = toml.load(prefix_dir / "winechad.toml")
		prefix_config = config["prefix"]
		is_64_bit = prefix_config.get("wine64", (prefix_dir / "drive_c" / "windows" / "syswow64").exists())

		apps = []
		for app_config in config.get("apps", []):
			apps.append(WineApp(
				name = app_config["name"],
				exe_path = app_config["path"],
				icon_path = app_config.get("icon_path", ""),
				description = app_config.get("description", ""),
				env = app_config.get("env", dict()),
				args = app_config.get("args", [])
			))

		return WinePrefix(
			name = prefix_config["name"],
			prefix_path = prefix_dir,
			wine_path = prefix_config.get("wine", None),
			global_wine_dir = global_wine_dir,
			description = prefix_config.get("description", ""),
			applications = apps,
			is_64_bit = is_64_bit,
			default_app = prefix_config.get("default_app", None),	
		)

		
	def validate(self):
		assert re.match(r'[\w-]+$', self.name), "Name must contain only 'word' characters"
		assert self.name != "", "Prefix name must not be empty"
		assert os.path.exists(self.get_wine_dir()), "WINE directory not found"
		assert os.path.exists(self.get_wine_bin_path()), "WINE executable (bin/wine) not found"
		assert os.path.exists(self.prefix_path), "Prefix directory not found"
		self.drive_path(self.default_drive) # Validate drive path
		if self.default_app is not None:
			self.get_app(self.default_app)
		
	def is_valid(self):
		try:
			self.validate()
		except:
			return False
		else:
			return True
			
	def invalid_reason(self):
		try:
			self.validate()
		except Exception as e:
			return str(e)
		else:
			return None
	
	def run(self, cmd: List[str], cwd: PurePosixPath, env_vars = dict()):
		pfx_env = os.environ.copy()
		pfx_env.update(env_vars)
		pfx_env["WINEARCH"] = "win64" if self.is_64_bit else "win32"
		pfx_env["WINEPREFIX"] = self.prefix_path
		pfx_env["WINE"] = self.get_wine_bin_path()
		pfx_env["WINEDLLOVERRIDES"] = "winemenubuilder.exe=d"

		log.info(f"WINE={pfx_env["WINE"]}")
		log.info(f"WINEARCH={pfx_env["WINEARCH"]}")
		log.info(f"WINEPREFIX={pfx_env["WINEPREFIX"]}")
		log.info(f"WINEDLLOVERRIDES={pfx_env["WINEDLLOVERRIDES"]}")
		log.info(f"CWD={cwd}")
		log.info(f"Running subprocess: {cmd}")

		proc = subprocess.Popen(
			cmd,
			cwd = cwd,
			env = pfx_env
		)
		proc.wait()
	
	def drive_path(self, letter):
		assert len(letter) == 1, "Drive name can only be a single letter a-z"
		assert letter.isalpha(), "Drive name can only be a single letter a-z"
		return self.prefix_path / ("drive_" + letter.lower())
	
	def run_winetricks(self, args):
		log.info("Running winetricks...")
		self.run(
			cmd = ["winetricks"] + args,
			cwd = self.drive_path(self.default_drive),
		)
		log.info("Winetricks process terminated...")
	
	def get_wine_dir(self):
		if self.wine_path is None:
			return Path("/usr")

		if self.wine_path.is_absolute():
			return self.wine_path

		paths = [
			self.prefix_path / self.wine_path,
			self.global_wine_dir / self.wine_path,
			self.global_wine_dir / ("amd64" if self.is_64_bit else "x86") / self.wine_path,
			self.global_wine_dir / ("linux-amd64" if self.is_64_bit else "linux-x86") / self.wine_path,
		]
		
		log.debug(f"Wine search paths: {paths}")

		for p in paths:
			if p.exists():
				return p
		else:
			return self.wine_path


	def get_wine_bin_path(self):
		# TODO search for wine
		wine_exe = "wine64" if self.is_64_bit else "wine"
		return self.get_wine_dir() / "bin" / wine_exe
	
	def run_wine(self, exe_path: PureWindowsPath, args = [], env_vars = dict()):
		log.info("Running wine...")
		exe_path = PureWindowsPath(exe_path)
		real_cwd = PurePosixPath()
		if exe_path.is_absolute():
			cwd = exe_path.parent
			log.info(cwd)
			drive, *rest = cwd.parts
			cwd = PureWindowsPath(drive.lower(), *rest)
			real_cwd = self.prefix_path / "dosdevices" / cwd.as_posix()
		else:
			real_cwd = self.prefix_path / "dosdevices" / "c:"

		cmd = [self.get_wine_bin_path(), exe_path] + args
		self.run(cmd, real_cwd, env_vars)
		log.info("WINE process terminated...")
	
	def run_taskmgr(self):
		self.run_wine("taskmgr.exe")
		
	def run_control_panel(self):
		self.run_wine("control.exe")
		
	def run_cmdline(self):
		self.run_wine("cmd.exe")
		
	def run_wineboot(self):
		self.run_wine("wineboot.exe")
		
	def run_winecfg(self):
		self.run_wine("winecfg.exe")
	
	def get_app(self, name: str):
		matching_apps = [a for a in self.applications if a.name == name]
		if len(matching_apps) > 1:
			log.error(f"Prefix {self.name} has multiple apps named '{name}'")
			raise KeyError(f"There's more than one app named {name} in {self.name}")
		assert len(matching_apps) != 0, f"No app named {name} in {self.name}"
		assert(len(matching_apps) == 1)
		return matching_apps[0]
	
class WineChad:
	def __init__(self, prefix_dirs: List[Path], wine_dir: Path):
		self.prefix_dirs = prefix_dirs
		self.wine_dir = wine_dir

		log.debug(f"Prefix dirs: {self.prefix_dirs}")
		log.debug(f"WINE dir: {self.wine_dir}")
		
		# TODO make paths absolute
		# TODO check if these dirs exist

		self.prefixes = []
		for pfx_dir in self.prefix_dirs:
			for prefix in pfx_dir.glob('*'):
				if (prefix / "winechad.toml").exists():
					log.debug(f"Found prefix config in {prefix}")
					pfx = WinePrefix.from_dir(prefix, self.wine_dir)
					self.prefixes.append(pfx)

	@staticmethod
	def load_from_file(path: Path):
		config = toml.load(path)
		general = config["general"]
		prefix_dirs = list(map(lambda x: Path(x), general["prefix_dirs"]))
		wine_dir = Path(general["wine_dir"])
		
		for prefix_dir in prefix_dirs:
			if not prefix_dir.is_absolute():
				prefix_dir = path.parent / prefix_dir

		if not wine_dir.is_absolute():
			wine_dir = path.parent / wine_dir

		return WineChad(prefix_dirs, wine_dir)
		
	
	
	def get_prefix(self, name):
		matching_prefixes = [p for p in self.prefixes if p.name == name]
		if len(matching_prefixes) > 1:
			raise KeyError(f"There's more than one prefix named {name}")
		elif len(matching_prefixes) == 0:
			raise KeyError(f"No prefix named {name}")
		
		assert(len(matching_prefixes) == 1)
		return matching_prefixes[0]
		
	def list_prefixes(self):
		for pfx in self.prefixes:
			prefix_color = "[bold green]" if pfx.is_valid() else "[bold red]"
			print(f"{prefix_color}{pfx.name}[/]")

	def list_prefixes_rich(self):
		table = rich.table.Table(title = "Prefixes")
		table.add_column("Name")
		table.add_column("Description")
		table.add_column("WINE")
		table.add_column("Arch")

		for p in self.prefixes:
			prefix_color = "[green]" if p.is_valid() else "[red]"
			comment = f"({p.invalid_reason()})" if not p.is_valid() else ""
			table.add_row(
				prefix_color + p.name + "[/] " + comment,
				p.description,
				"" if p.wine_path is None else str(p.wine_path),
				"[cyan]amd64[/]" if p.is_64_bit else "[blue]x86[/]",
			)

		print(table)

	def list_apps_rich(self):
		table = rich.table.Table(title = "Apps")
		table.add_column("Prefix")
		table.add_column("App")
		table.add_column("Description")

		for p in self.prefixes:
			prefix_color = "[green]" if p.is_valid() else "[red]"
			pfx_comment = f"({p.invalid_reason()})" if not p.is_valid() else ""
			for a in p.applications:
				app_comment = f"({a.invalid_reason()})" if not a.is_valid() else ""
				
				app_color = "[/]"
				if a.is_valid() and a.name == p.default_app:
					app_color = "[cyan]"
				elif a.is_valid():
					app_color = "[green]"
				else:
					app_color = "[red]"
					
				desc = a.description
				if not desc:
					desc = "[yellow]" + p.description + "[/]"

				table.add_row(
					prefix_color + p.name + "[/] " + pfx_comment,
					app_color + a.name + "[/] " + app_comment,
					desc
				)

		print(table)



def winechad_read_config(path):
	with open(path) as f:
		return WineChad.load_from_file(f)
	
def winechad_main():
	parser = argparse.ArgumentParser(
		prog = "winechad",
		description = "WINE prefix manager for true chads",
		epilog = "Truly amazing."
	)
	
	parser.add_argument("-l", "--log", help = "Enable logging", action = "store_true")

	cmd_subparsers = parser.add_subparsers(dest = "command", help = "Sub-command")
	run_aliases = ["run", "r"]
	run_parser = cmd_subparsers.add_parser(run_aliases[0], help = "Run WINE application", aliases = run_aliases[1:])
	run_parser.add_argument("prefix", help = "WINE prefix name")
	run_parser.add_argument("app", help = "WINE application name", default = None, nargs = "?")
	
	apps_parser = cmd_subparsers.add_parser("apps", help = "List WINE apps")
	prefixes_parser = cmd_subparsers.add_parser("prefixes", help = "List WINE prefixes")
	
	isolate_parser = cmd_subparsers.add_parser("sandbox", help = "Configure WINE prefix for isolated operation")
	isolate_parser.add_argument("prefix", help = "WINE prefix name")
	
	configure_aliases = ["configure", "conf", "cfg", "c"]
	configure_parser = cmd_subparsers.add_parser(configure_aliases[0], help = "Configure WINE prefix", aliases = configure_aliases[1:])
	configure_parser.add_argument("prefix", help = "WINE prefix name")
	
	reboot_parser = cmd_subparsers.add_parser("reboot", help = "Reboot WINE prefix")
	reboot_parser.add_argument("prefix", help = "WINE prefix name")
	
	control_parser = cmd_subparsers.add_parser("control", help = "Open Control Panel")
	control_parser.add_argument("prefix", help = "WINE prefix name")
	
	taskmgr_parser = cmd_subparsers.add_parser("taskmgr", help = "Open Task Manager")
	taskmgr_parser.add_argument("prefix", help = "WINE prefix name")
	
	regedit_parser = cmd_subparsers.add_parser("regedit", help = "Open Registry Editor")
	regedit_parser.add_argument("prefix", help = "WINE prefix name")
	
	winetricks_parser = cmd_subparsers.add_parser("tricks", help = "Run winetricks")
	winetricks_parser.add_argument("prefix", help = "WINE prefix name")
	winetricks_parser.add_argument("args", nargs = argparse.REMAINDER)
	
	cmd_parser = cmd_subparsers.add_parser("cmd", help = "Open CMD.EXE")
	cmd_parser.add_argument("prefix", help = "WINE prefix name")
	
	args = parser.parse_args()

	if args.log:
		logging.basicConfig(level="NOTSET", format="%(message)s", datefmt="[%X]", handlers=[RichHandler()])

	winechad = None
	try:
		winechad = winechad_read_config(os.getenv("WINECHAD_CONFIG", default = os.path.expanduser("~/.config/winechad/config.toml")))
	except Exception as ex:
		print(f"Could not load config: [bold red]{str(ex)}[/bold red]")
		sys.exit(1)
	
	try:
		if (args.command == 'apps'):
			winechad.list_apps_rich()
		elif (args.command == 'prefixes'):
			winechad.list_prefixes_rich()
		elif (args.command == 'cmd'):
			winechad.get_prefix(args.prefix).run_cmdline()
		elif (args.command in run_aliases):
			pfx = winechad.get_prefix(args.prefix)
			pfx.get_app(args.app or pfx.default_app).run()
		elif (args.command == 'taskmgr'):
			winechad.get_prefix(args.prefix).run_taskmgr()
		elif (args.command == 'control'):
			winechad.get_prefix(args.prefix).run_control_panel()
		elif (args.command == 'reboot'):
			winechad.get_prefix(args.prefix).run_wineboot()
		elif (args.command in configure_aliases):
			winechad.get_prefix(args.prefix).run_winecfg()
		elif (args.command == 'regedit'):
			winechad.get_prefix(args.prefix).run_regedit()
		elif (args.command == 'tricks'):
			winechad.get_prefix(args.prefix).run_winetricks(args.args)
		elif (args.command == 'sandbox'):
			winechad.get_prefix(args.prefix).run_winetricks(["sandbox"])
			winechad.get_prefix(args.prefix).run_winetricks(["mimeassoc=off"])
		else:
			parser.print_help()
	except Exception as ex:
		print(f"Failed: [bold red]{str(ex)}[/bold red]")
		
if __name__ == "__main__":
	winechad_main()
